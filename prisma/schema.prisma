generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  clerkId               String                 @unique
  name                  String?
  email                 String                 @unique
  profileImage          String?
  tier                  String?                @default("Free")
  credits               String?                @default("40")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  localGoogleId         String?                @unique
  googleResourceId      String?                @unique
  connections           Connections[]
  DiscordWebhook        DiscordWebhook[]
  LocalGoogleCredential LocalGoogleCredential?
  Notion                Notion[]
  Slack                 Slack[]
  workflows             Workflows[]
  superAgentAPI         String?                @unique
}

model LocalGoogleCredential {
  id          String   @id @default(uuid())
  accessToken String   @unique
  folderId    String?
  pageToken   String?
  channelId   String   @unique @default(uuid())
  subscribed  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
}

model DiscordWebhook {
  id          String        @id @default(uuid())
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  userId      String
  connections Connections[]
  user        User          @relation(fields: [userId], references: [clerkId])
}

model Slack {
  id               String        @id @default(uuid())
  appId            String
  authedUserId     String
  authedUserToken  String        @unique
  slackAccessToken String        @unique
  botUserId        String
  teamId           String
  teamName         String
  userId           String
  connections      Connections[]
  User             User          @relation(fields: [userId], references: [clerkId])
}

model Notion {
  id            String        @id @default(uuid())
  accessToken   String        @unique
  workspaceId   String        @unique
  databaseId    String        @unique
  workspaceName String
  workspaceIcon String
  userId        String
  connections   Connections[]
  User          User          @relation(fields: [userId], references: [clerkId])
}

model Connections {
  id               String          @id @default(uuid())
  type             String
  discordWebhookId String?
  notionId         String?
  userId           String?
  slackId          String?
  DiscordWebhook   DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  Notion           Notion?         @relation(fields: [notionId], references: [id])
  Slack            Slack?          @relation(fields: [slackId], references: [id])
  User             User?           @relation(fields: [userId], references: [clerkId])
}

model Workflows {
  id                    String   @id @default(uuid())
  nodes                 String?
  edges                 String?
  name                  String
  createdAt             String?
  discordTemplate       String?
  notionTemplate        String?
  slackTemplate         String?
  AiTemplate            String?
  slackChannels         String[]
  slackAccessToken      String?
  notionAccessToken     String?
  notionDbId            String?
  flowPath              String?
  cronPath              String?
  publish               Boolean? @default(false)
  shared                Boolean? @default(false)
  featured              Boolean? @default(false)
  description           String
  userId                String
  User                  User     @relation(fields: [userId], references: [clerkId])
  thumbnail             String?
  chatHistory           String[]
  fluxDevTemplate                String?
  fluxloraTemplate               String?
  fluxTrainTemplate              String?
  ImageToImageTemplate           String?
  videoTemplate                  String?
  fluxGeneralTemplate            String?
  CharacterTemplate              String?
  DreamShaperTemplate            String?
  fluxDevLora                    String?
  cogVideo5BTemplate             String?
  musicGenTemplate               String?
  videoToVideoTemplate           String?
  lunalabsImageToVideoTemplate   String?
  lunalabsTextToVideoTemplate    String?
  sadTalkerTemplate              String?
  textToVoiceTemplate            String?
  livePortraitTemplate           String?
  autoCaptionTemplate            String?
  PublicChatHistory              String[]
}
